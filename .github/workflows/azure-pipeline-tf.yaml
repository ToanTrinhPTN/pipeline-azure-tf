name: 'Terraform Deployment'
on:
  pull_request:
    branches:
      - master 

  workflow_dispatch:
    inputs:
      working_directory:
        type: choice
        description: Who to greet
        required: true
        options:
          - terraform
        
      name:
        type: choice
        description: Who to greet
        required: true
        default: 'run'
        options:
          - test
          - run
 
jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless of whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: './${{github.event.inputs.working_directory}}'

    steps:       
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
      
      # Initilize a module for terraform 
      - name: Terraform Init
        run: terraform init
      
      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform fmt
        id: fmt
        run: terraform fmt 
        continue-on-error: true 

      # Validate configuration file
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        continue-on-error: false

      # Login to Azure CLI to perform terraform's action 
      - name: Login into Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }} 
        
      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: terraform plan -input=false
                
      # Apply Terraform changes
      - name: Terraform Apply
        if: github.event.inputs.name == 'run' ||  github.event.inputs.name == 'test'
        run: terraform apply -auto-approve -input=false
      
      # Destroy Terraform after testing
      - name: Terraform Destroy
        if: github.event.inputs.name == 'test' 
        run: terraform destroy -auto-approve -input=false
    